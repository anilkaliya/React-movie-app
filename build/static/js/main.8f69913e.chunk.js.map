{"version":3,"sources":["service/token-service.js","components/posts/post-list.js","components/posts/post-create.js","components/auth/nav.js","components/Routes/Routes.js","App.js","reducers/auth-reducer.js","reducers/index.js","serviceWorker.js","index.js"],"names":["getToken","localStorage","getItem","setExpiry","time","setItem","setToken","token","expireToken","setTimeout","setUserId","id","initial","connect","state","isAuthenticated","userData","props","useHistory","useState","movieArray","setMovieArray","useEffect","console","log","axios","get","then","res","data","posts","map","movie","Card","CardBody","className","title","src","imagePath","alt","content","CardLink","creator","to","pathname","_id","style","backgroundColor","onClick","onDelete","PostCreate","handleSubmit","e","preventDefault","formData","FormData","set","overview","append","file","setState","isLoading","put","catch","err","post","headers","type","history","push","handleInput","event","name","target","value","onFileChange","reader","FileReader","image","files","addEventListener","result","readAsText","this","location","Blob","body","outline","color","Form","onSubmit","FormGroup","row","Label","for","sm","Col","Input","onChange","FormText","accept","Button","Component","withRouter","float","Login","lazy","Signup","Routes","exact","path","component","PostList","fallback","Spinner","width","height","App","store","initialState","isError","registered","allReducer","combineReducers","action","payload","Object","assign","loggerMiddleware","createLogger","createStore","applyMiddleware","thunkMiddleware","Boolean","window","hostname","match","interceptors","request","use","error","Promise","reject","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f69913e.chunk.js","sourcesContent":["export function getToken(){\r\n    return localStorage.getItem('token');\r\n}\r\nexport function setExpiry(time){\r\n    localStorage.setItem('expiresAt',time)\r\n}\r\nexport function setToken(token){\r\n    localStorage.setItem('token',token)\r\n}\r\n\r\nexport function getExpiry(){\r\n    return localStorage.getItem('expiresAt')\r\n}\r\nexport function expireToken(){\r\n    let time=getExpiry()*1000;\r\n    setTimeout(()=>{\r\n        localStorage.setItem('token','');\r\n    },time)\r\n    \r\n}\r\nexport function setUserId(id){\r\n    localStorage.setItem('user_id',id)\r\n}","import React, { useState,useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './post-list.css'\r\nimport { Card, CardLink, CardBody } from 'reactstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst initial=[];\r\n\r\n function PostList(props) {\r\n    const history=useHistory()\r\n   \r\n    const [movieArray, setMovieArray]=useState(initial)\r\n    useEffect(()=>{\r\n        console.log(\"updated\");\r\n        axios.get(`/api/posts`).\r\n                then(res => {\r\n                    if (res.data.posts) {\r\n                        setMovieArray(res.data.posts)\r\n                        \r\n                    }\r\n                  \r\n                })\r\n    },[])\r\n\r\n    const Delete = (id) => {\r\n        this.onDelete(id)\r\n    }\r\n    const onDelete = (id) => {\r\n        axios.delete('/api/posts/' + id).\r\n            then(res => {\r\n                   history.push('/')\r\n            }).\r\n            catch(err =>\r\n                console.log(err)\r\n            )\r\n\r\n            }\r\n        return (\r\n            movieArray.map(movie => {\r\n                return <Card >\r\n                    <CardBody>\r\n                        <div className=\"one-movie\">\r\n                            <div className=\"title\">\r\n                                <strong>{movie.title}</strong>\r\n                            </div>\r\n                            <div className=\"post-image\">\r\n                                <img src={'data:image/png;base64,' + movie.imagePath} alt=\"movie.original_title\" />\r\n                            </div>\r\n                            <div className=\"overview\">\r\n                                {movie.content}\r\n                            </div>\r\n                            <CardLink >{(props.isAuthenticated && movie.creator===localStorage.getItem('user_id') )&& <Link to={{\r\n                                pathname: '/edit',\r\n                                state: {\r\n                                    id: movie._id\r\n                                }\r\n                            }}> Edit</Link>\r\n                             } </CardLink>\r\n                        <CardLink>{ (props.isAuthenticated && movie.creator===localStorage.getItem('user_id') )&&\r\n                        <button style={{ backgroundColor: \"red\" }} \r\n                        onClick={() => Delete(movie._id)}>Delete</button>}</CardLink>\r\n                        </div >\r\n                    </CardBody>\r\n                </Card >\r\n            })\r\n        )\r\n    }\r\n\r\nconst mapStateToPorps=state=>{\r\n    return{\r\n    isAuthenticated:state.userData.isAuthenticated\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToPorps)(PostList);","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Col, Card, Button, FormText, FormGroup, Label, Spinner, Form, Input } from 'reactstrap';\r\nimport './post-create.css'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\n\r\n\r\n class PostCreate extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            title: '',\r\n            overview: '',\r\n            isLoading: false,\r\n            type:''\r\n        }\r\n                this.id=null;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.location.state ){\r\n    const {id}=this.props.location.state;\r\n    this.id=id;\r\n    if(id){\r\n        axios.get('/api/posts/'+id).\r\n        then(res=>{\r\n            console.log(res)\r\n            this.setState({\r\n                file:new Blob([res.data.imagePath]),\r\n                title:res.data.title,\r\n                overview:res.data.content\r\n            })\r\n        })\r\n    }\r\n}\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        var formData = new FormData();\r\n        formData.set('title', this.state.title);\r\n        formData.set('content', this.state.overview);\r\n        formData.append(\"image\", this.state.file, this.state.title)\r\n        this.setState({\r\n            isLoading: true,\r\n  \r\n        })\r\n        if(this.id){\r\n\r\n            formData.set('id',this.id)\r\n            axios.put('/api/posts/' + this.id, formData)\r\n            .then(res => {\r\n                this.setState({\r\n                    isLoading: false\r\n                 })\r\n                      }).\r\n            catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else{\r\n        axios.post('/api/posts', formData, \r\n        { headers: { 'Content-Type': this.state.type } })\r\n            .then(res => {\r\n                this.setState({\r\n                    isLoading: false\r\n                 })\r\n                      }).\r\n            catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n   this.props.history.push(\"/\");\r\n\r\n    }\r\n    handleInput = (event) => {\r\n        let name = event.target.name;\r\n        this.setState({\r\n            [name]: event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    onFileChange = (event) => {\r\n        const reader = new FileReader();\r\n        let image = event.target.files[0];\r\n        this.setState({\r\n            type: image.type\r\n        })\r\n        console.log(image.type);;\r\n        reader.addEventListener(\"loadend\", function () {\r\n            image = reader.result\r\n        });\r\n        reader.readAsText(image);\r\n       \r\n        this.setState({\r\n            file: image\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() { \r\n   \r\n\r\n        return (\r\n\r\n            <Card  body outline color=\"secondary\">\r\n                <Form onSubmit={this.handleSubmit}>\r\n\r\n                    <FormGroup row>\r\n                        <Label for=\"title\" sm={2}>Title</Label>\r\n                        <Col sm={7}>\r\n                            <Input type=\"textarea\" name=\"title\" id=\"title\" value={this.state.title} onChange={this.handleInput} />\r\n                            <FormText></FormText>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"overview\" sm={2}>OverView</Label>\r\n                        <Col sm={7}>\r\n                            <Input type=\"textarea\" name=\"overview\" id=\"title\" value={this.state.overview} onChange={this.handleInput} />\r\n                            <FormText></FormText>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        \r\n                        <Col sm={7}>\r\n                            <Input type=\"file\" name=\"file\" id=\"image\"  onChange={this.onFileChange} accept='image/jpeg,image/jpg,image/png' />\r\n                            <FormText color=\"muted\">\r\n                            </FormText>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    {/* <Input type=\"file\" name=\"file\" id=\"image\" ref={this.fileInput}  /> */}\r\n\r\n                    <Button  color=\"secondary\" type=\"submit\">Submit Details</Button>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(PostCreate);\r\n","import React ,{useState} from 'react'\r\nimport { connect} from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\nimport './nav.css'\r\n\r\n\r\nfunction Navigate(props) {\r\n\r\n\r\n    \r\n    return (\r\n\r\n      <ul >\r\n        <li>\r\n        <Link to =\"/\">Movies</Link>\r\n        </li>\r\n        <li>\r\n        <Link to =\"/create\">{props.isAuthenticated && 'Add Movie'}</Link>\r\n        </li>\r\n        <li>\r\n        <Link style={{float:\"right\"}}to=\"/signup\">{!props.isAuthenticated && 'Signup'}</Link>\r\n        </li>\r\n        <li>\r\n        <Link to =\"/login\"> {!props.isAuthenticated && 'Login'}</Link>\r\n        </li>\r\n      </ul>\r\n    \r\n\r\n  \r\n \r\n  \r\n\r\n    )\r\n}\r\n\r\nconst mapstatetoProps=state=>{\r\n  return {\r\n  isAuthenticated:state.userData.isAuthenticated\r\n}\r\n}\r\n\r\nexport default connect(mapstatetoProps)(Navigate);","import React ,{Suspense,lazy} from 'react'\r\nimport {BrowserRouter as Router ,Route,Switch} from 'react-router-dom'\r\nimport PostList from '../posts/post-list';\r\nimport PostCreate from '../posts/post-create';\r\nimport {Spinner} from 'reactstrap'\r\nimport Navigate from '../auth/nav.js'\r\nimport './Routes.css'\r\nconst Login = lazy(() => import('../../containers/login-container'));\r\nconst  Signup=lazy(()=>import('../../containers/signup-container')) \r\n\r\n\r\n\r\n\r\nexport default function Routes() {\r\n    return (\r\n        \r\n            <Router>\r\n             \r\n              <Navigate></Navigate>\r\n           \r\n            <Switch >\r\n            <Route  exact path=\"/\" component={PostList}/> \r\n            <Route path=\"/create\" component={PostCreate} />\r\n            <Route path=\"/edit\" component={PostCreate} />\r\n             <Suspense  className=\"container\" fallback=\r\n            {<Spinner className=\"loader\" style={{ width: '8rem', height: '8rem' }} type=\"grow\" />}>\r\n            <Route path='/login' component={Login}/> \r\n          <Route path='/signup' component={Signup}/> \r\n         </Suspense> \r\n         </Switch>\r\n           </Router>\r\n      \r\n           \r\n       \r\n    )\r\n}\r\n","import React from 'react';\nimport Routes  from './components/Routes/Routes.js';\nimport {Provider} from 'react-redux';\nimport './App.css'\nfunction App(props) {\n  return (\n\n    <Provider store={props.store}>\n    \n     <Routes/>\n   \n\n     </Provider>  \n     \n   \n      \n  )\n\n}\n\nexport default App;\n","const initialState = {\r\n    isLoading: false,\r\n    isError: '',\r\n    registered:false,\r\n    isAuthenticated:false\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'BEFORE_AUTH':\r\n        return { ...state, \r\n                isLoading: action.payload.isLoading,\r\n                 isAuthenticated:action.payload.isAuthenticated,\r\n                 registered:action.payload.registered,\r\n                 isError:action.payload.isError\r\n                }\r\n        case 'AFTER_SIGNUP':\r\n            return Object.assign({}, state, \r\n                { isLoading: action.payload.isLoading,\r\n                registered:action.payload.registered,\r\n                isAuthenticated:action.payload.isAuthenticated,\r\n                isError:action.payload.isError\r\n            })\r\n        case 'AFTER_LOGIN':\r\n            return Object.assign({}, state, \r\n                {   registered:action.payload.registered,\r\n                   isLoading: action.payload.isLoading,\r\n                    isAuthenticated:action.payload.isAuthenticated,\r\n                    isError:action.payload.isError\r\n                })\r\n        case 'ERROR':\r\n            return Object.assign({}, state, \r\n                {\r\n                    isLoading: action.payload.isLoading ,\r\n                    isError: action.payload.isError,\r\n                    isAuthenticated:action.payload.isAuthenticated,\r\n                    registered:action.payload.registered\r\n                })\r\n        default:\r\n            return state;\r\n    }\r\n}","import authReducer from './auth-reducer'\r\nimport {createStore,applyMiddleware }  from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {combineReducers} from 'redux'\r\nimport {createLogger} from 'redux-logger';\r\nconst allReducer=combineReducers({\r\n  userData:authReducer\r\n})\r\n  \r\n  \r\n\r\nconst loggerMiddleware=createLogger();\r\n\r\nexport default createStore(allReducer,\r\n  applyMiddleware(thunkMiddleware,loggerMiddleware));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './reducers/index';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport axios from 'axios'\nimport { getToken } from './service/token-service';\n\n\n\n\naxios.interceptors.request.use(request=>{\n  request.headers[\"Authorization\"] =\"Bearer \" +getToken();\n  return request\n},error=>{\n  Promise.reject(error)\n})\n\nReactDOM.render(\n<Provider store={store}>\n    <App store={store}/>\n    </Provider>,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}